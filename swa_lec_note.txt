LECTURE 1 *****************
- Architecture types: monolith, SOA, microservices
- Microservices are distributed systems

Software qualities *******
- FRUPS model: functionality, usability, reliability, peformance and supportability

Architecture (design) principles *****
- separation of concern, SOLID, encapsulation and information hiding, modularity, simple, flexible, loose coupling, high cohesion etc
- functional, qualities, constraints and principles

Communicating architecture ******* 4C's
- Context diagram: shows the big picture
- Container diagram: shows high level structure of software architecture Shows the major technology schoices and how the containers communicated with each other. Each container has name, technology and responsibilities. E.g. web servers, ESBs, databases, file systems, web browsers, app servers, windows services, standalone apps, etc
- Component diagram: decompose each container into distinct components, services, layers, subsystems, etc. sequence diagram of components
- Class diagram: more concrete diagram 

Identify risk: risk storming ******
- Technique that provides a collaborative way to identify and visualize risks. Steps is to draw the architecture diagrams, identify the risks individuals, coverage the risks on the diagrams and prioritize the risks

Software Quality improvement********
- performance: (caching and in-memory calls)
- scalability: clustering and stateless systems
- availability: failover and loadbalancing, improved uptim
- maintainability: Keep it simple, naming conventions and modularity
- reliability: failover, thread safety and system health monitoring

LECTURE 2 ***************
Architecture styles ****
- Layering: logical separation of concerns. each layer is independent and are distributed. they can use different techniques. 3 layered architecure e.g. is ui, domain, and persistence layer. benefits: can be distributed, separation of concerns. disadvantages: performance and manpower need
- Client-server: multiple clients per server, multiple tiers (a physical separation of a system) and requests are typically handled in separate threads. Benefits: easy maintenance and support. Disadvantage is performance
- Pipe and filter: they aid application communication, they are independent and reusable components, their orders can change and new filters can be added. Disadvantages include sequential processing and state sharing difficulty
- Master-slave: masters coordinates work and organizes work into distinct subtasks. these tasks are allocated to isolated slaves. the slaves report their result to the master and the master integrates the results. Benefit is scaling, fault tolerant in slaves and complete control of master. demerits is single point of failure and problems must be decomposable 
- Microkernel: like a framework, benefits includes flexibility, extensibility and separation of conern. Demerits is complexity

Service class******
- contains the business logic. It serves as the entry point (facade pattern)

DOA/repository class ********
- Object that knows how to access the database. Contains all db related logic and also called repository

Proxy/Gateway class *********
- provides the entry point for the system. its called facade in design

SQL vs NoSQL *************
- MySQL is less flexible. it is a relational, hence structured and standardization must be followed. They key words are STANDARDIZATION and NORMALIZATION so as to avoid redundancy
- NoSQL: allows the unformatted and non-related data to be placed and operated as per user's requirement, contains indices, auto sharding and replication
- NoSQL is easier to scale, hence the reason they are used in big data and real-time web applications, cox they are denormalized
- SQL works perfectly if you are looking for some type of consistency following some pre-defined model. But with the rigid schema restrictions, scalability requires more effort when compared to NoSQL
- With the advent of Relational Mapping tools like mongoose, noSQL can still work like SQL while still maintaining some features of NoSQL
- Speak about CAP theorem. We tend to ask questions about the conditions the database must fulfil around the CAP pyramid. With that we can decide what the tradeoffs will be
- Speak from academic perspective (community and support)
Summarily: SQL databases are ideal for projects where requirements can be determined and robust data integrity is essential. NoSQL databases are ideal for unrelated, indeterminate or evolving data requirements where speed and scalability are more important

Scaling MySQL DB ******
- Horizontal: 
   - Application level through Redis for caching, CDN for static content and changing the ORM config if any to load lazily. Likewise, using AWS ElasticSearch can help
   - MYSQL level through denormalization, partitioning,  replication, sharding and changing the system architecture to miscroservices
- Vertical (last resort)
   - acquire more infrastructure, vendor lock in, cost

Brewers cap theorem *********
- A distributed system can only support 2 of the fllg xtics: Consistency, availability and partition tolerance

Strict consistency – eventual consistency *********
- All nodes see the same data at the same time
- NoSQL has eventual consistency
- RDBMS has strict consistency


LECTURE 3 *************
Dependency injection ********
- Dependency Injection is the core of spring. It connects objects together by configuration. It used the @Autowired annotation to implement Inversion of control, separation of concerns and loose coupling. DI can be constructor , field based or setter and getter based. IOC is a  design pattern used to implement DI to ensure loose coupling and modularity

REST ***********
- An architecture for handling web services request and responses
- It is used to handle synchronous communication without buffer and when multiple application are not within the same organization 

Mongo *********
- A document based No-SQl database that uses json like documents with optional schemas. 

LECTURE 4 ***** DDD
Domain****
- what a business does and the worls he does it in.
- anemic: model with no business logic
- rich: model with business logic

Entity *********
- A mutable class with identity and lifecycle, e.g. person, customer, product

Value object *********
- An immutable, self-validating and idempotent object with no identity in the domain, e.g. weight, length, adress
- 2 value objects are equal if they have the same attributes values
- Mutable clases are prone to errors, easier to share, thread safe, combinable and testable

- structural equality = value objects
- identity equality = entities 

Domain service ***********
- used to represent a behavior that does not belong to an entity or value object e.g. transferFUndsService
- Stateless service that represent a behavior 

Domain Events *************
- Immutable classes that represents important events that have already happened. It uses sequence diagram e.g. ProductAddedEvent flow

Aggregate root  ***************
- Aggregate is a Collection of small entities and value objects that makes up a domain. agreggates communicates through keeping the IDs of other aggregrates
- Aggregate root acts as the entry point to the aggregrate and a connection to the smaller entities and value objects. All communication with an aggregrate goes via its root
- Aggregrate roots never holds a reference to another aggregrate root 
- aggregates should be small. Large aggregrates decrease performance


LECTURE 5 *************** DDD 2
Ubiquitous language ***************
- one common language to describe the concepts of a domain

Rich domain model ***************
- domain model with business logic 

Bounded context ***************
- different model per bounded context

Components ***************
-  decomposing the domain in functional componentns 

Interface design ***************
- startwith client first, single responsibility principle, easy to use use and learn 

DTO’s ***************
- object that contains only attributes and getters and setters


LECTURE 6 ************* JMS 

JMS ***********
- 

Hub and spoke ***********
- functionality: transport, transformation (xml to json), routing (sending message to component based on certain criteria) and orchestration (business process runs within the integration broker)
- benefits: separation of concerns, easy to add new components and uses adapters
- drawbacks: single point of failure, complexity and legacy in nature

SOA *********
- SOA  aspects: ESB communication, decomposing business domain in services and making the business processes a 1st class citizen
- Benefits: independent services, separation of business processes and service logic, reuse of services, architecture flexibility


ESB ***********
Integration patterns  ***********
- Point-to-point/publish subscribe: subscribers subscribe to channels, publishers publish messages to particular channel and subscribers receives the messages 

- Datatype channel 
- Dead letter channel
- Command, document, event message 
- Message dispatcher 
- Router 
- Filter 
- Recipient list 
- Splitter 
- Aggregator 
- Normalizer 
- Canonical data model 

TM Quotes
- TM is the source of all activity